=head1 NAME

Mozilla::DOM::EventTarget

=head1 DESCRIPTION

Mozilla::DOM::EventTarget is a wrapper around an instance of Mozilla's
nsIDOMEventTarget interface. This class inherits from
L<Supports|Mozilla::DOM::Supports>.

 * The nsIDOMEventTarget interface is the interface implemented by all
 * event targets in the Document Object Model.
 *
 * For more information on this interface please see 
 * L<http:E<sol>E<sol>www.w3.orgE<sol>TRE<sol>DOM-Level-2-EventsE<sol>>

Section 1.3 of the DOM Level 2 Events specification says
"the EventTarget interface is implemented by all Nodes" and
"this interface can be obtained by using binding-specific
casting methods on an instance of the Node interface".
What this means is you use QueryInterface to transform
a Node into an EventTarget. See the documentation below
for GetIID.

The AddEventListener and RemoveEventListener methods are only
implemented EXPERIMENTALLY. See README for how to enable
experimental features.

=head1 CLASS METHODS

=head2 $iid = Mozilla::DOM::EventTarget->B<GetIID>()

Pass this to QueryInterface on a L<Node|Mozilla::DOM::Node>
object to get back an EventTarget, like

  $iid = Mozilla::DOM::EventTarget->GetIID
  $target = $body->QueryInterface($iid);
  $target->DispatchEvent($event);

You can also print it out, and it will look like

  {1c773b30-d1cf-11d2-bd95-00805f8ae3f4}

=head1 METHODS

=head2 $target->B<AddEventListener>($type, $listener, $useCapture)

=over

=over

=item * $type (string)

=item * $listener (Mozilla::DOM::EventListener)

=item * $useCapture (boolean)

=back

THIS METHOD IS EXPERIMENTAL. SEE README FOR HOW TO ENABLE EXPERIMENTAL FEATURES.

This method allows the registration of EventListeners on the event target.
If an L<EventListener|Mozilla::DOM::EventListener> is added to an EventTarget
while it is processing an L<Event|Mozilla::DOM::Event>, it will not be triggered
by the current actions but may be triggered during a later stage of event flow,
such as the bubbling phase.

If multiple identical EventListeners are registered on the same
EventTarget with the same parameters, the duplicate instances are
discarded. They do not cause the EventListener to be called twice,
and since they are discarded they do not need to be removed with the
RemoveEventListener method.

=over 4

=item $type

The event type for which the user is registering. This is a string
such as 'click'. See L<Mozilla::DOM::Event::InitEvent|Mozilla::DOM::Event::InitEvent>
for other types.

=item $listener

The listener parameter takes an interface implemented by the user
which contains the methods to be called when the event occurs.

=item $useCapture

If true, indicates that the user wishes to initiate capture.
After initiating capture, all events of the specified type will be
dispatched to the registered L<EventListener|Mozilla::DOM::EventListener>
before being dispatched to any EventTargets beneath them in the tree.
Events which are bubbling upward through the tree will not trigger
an EventListener designated to use capture.

=back

=back

=head2 $target->B<RemoveEventListener>($type, $listener, $useCapture)

=over

=over

=item * $type (string)

=item * $listener (Mozilla::DOM::EventListener)

=item * $useCapture (boolean)

=back

THIS METHOD IS EXPERIMENTAL. SEE README FOR HOW TO ENABLE EXPERIMENTAL FEATURES.

This method allows the removal of event listeners from the event
target. If an L<EventListener|Mozilla::DOM::EventListener> is removed
from an EventTarget while it is processing an event, it will not be triggered
by the current actions. EventListeners can never be invoked after being
removed. Calling removeEventListener with arguments which do not identify
any currently registered EventListener on the EventTarget has no effect.

=over 4

=item $type

Specifies the event type of the L<EventListener|Mozilla::DOM::EventListener>
being removed. This is a string such as 'mouseover'. See
L<Mozilla::DOM::Event::InitEvent|Mozilla::DOM::Event::InitEvent>
for the possible types.

=item $listener

Indicates the L<EventListener|Mozilla::DOM::EventListener> to be removed.

=item $useCapture

Boolean which specifies whether the L<EventListener|Mozilla::DOM::EventListener>
being removed was registered as a capturing listener or not. If a listener
was registered twice, one with capture and one without, each must be
removed separately. Removal of a capturing listener does not affect
a non-capturing version of the same listener, and vice versa.

=back

=back

=head2 $bool = $target->B<DispatchEvent>($event)

=over

=over

=item * $event (Mozilla::DOM::Event)

=back

This method allows the dispatch of an L<Event|Mozilla::DOM::Event>
into the implementation's event model. Events dispatched in this manner
will have the same capturing and bubbling behavior as events dispatched
directly by the implementation. The target of the event is the EventTarget
on which DispatchEvent is called.

=over 4

=item $event

An L<Event|Mozilla::DOM::Event> that specifies the event type, behavior,
and contextual information to be used in processing the event.

=back

The return value indicates whether any of the listeners which handled the
event called L<PreventDefault|Mozilla::DOM::Event/PreventDefault>.
If PreventDefault was called the value is false, else the value is true.

Throws: UNSPECIFIED_EVENT_TYPE_ERR. Raised if the Event's type was 
not specified by initializing the event before dispatch_event was called.
Specification of the Event's type as null or an empty string will also
trigger this exception.

=back

=head1 SEE ALSO

L<Mozilla::DOM>

=head1 COPYRIGHT

Copyright (C) 2005, Scott Lanning

This software is licensed under the LGPL.  See L<Mozilla::DOM> for a full notice.

=cut
